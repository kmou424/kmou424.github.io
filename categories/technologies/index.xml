<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on SaikaLab</title><link>https://labs.kmou424.moe/categories/technologies/</link><description>Recent content in 技术 on SaikaLab</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 14 Jul 2025 18:38:22 +0800</lastBuildDate><atom:link href="https://labs.kmou424.moe/categories/technologies/index.xml" rel="self" type="application/rss+xml"/><item><title>用 sing-box + Cloudflare WARP 搭建链式代理，为爬虫提供稳定 IP</title><link>https://labs.kmou424.moe/p/sing-box-chain-proxy-for-crawler/</link><pubDate>Mon, 14 Jul 2025 18:38:22 +0800</pubDate><guid>https://labs.kmou424.moe/p/sing-box-chain-proxy-for-crawler/</guid><description>&lt;p>最近有一些爬多媒体网站的需求，自己手上又没有太多机器，IP 池也不够用，突然想到了之前折腾过的 Cloudflare WARP，于是就想着能不能用它来搭建一个链式代理，为爬虫提供稳定的干净 IP。
当然，在这之前还是得先准备一台国外 VPS。由于国内直连 Cloudflare WARP 丢包和延迟是在有点感人。国外的大水管 VPS 价格也相当便宜，可以考虑省预算买美西的 VPS，或者预算充足的话买香港的 VPS（选择你运营商的国际优化线路，费用也不会太贵）。&lt;/p>
&lt;h3 id="安装-cloudflare-warp">&lt;a href="#%e5%ae%89%e8%a3%85-cloudflare-warp" class="header-anchor">&lt;/a>安装 Cloudflare WARP
&lt;/h3>&lt;p>按照&lt;a class="link" href="https://pkg.cloudflareclient.com/" target="_blank" rel="noopener"
>官网&lt;/a>上的教程添加软件源（这里我用的是 Debian 12），然后安装 Cloudflare WARP 客户端。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add cloudflare gpg key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg &lt;span class="p">|&lt;/span> sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add this repo to your apt repositories&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ &lt;/span>&lt;span class="k">$(&lt;/span>lsb_release -cs&lt;span class="k">)&lt;/span>&lt;span class="s2"> main&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /etc/apt/sources.list.d/cloudflare-client.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Install&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt-get install cloudflare-warp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装好之后，可以自由选择要不要搞一个 WARP+ license 整个无限流量（约为 1923837100 GB），这里我就不赘述。然后把 warp-cli 模式设置为仅代理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 连接 WARP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">warp-cli connect
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置为仅代理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">warp-cli set-mode proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>来用 curl 测试一下 WARP 是否正常工作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -x socks5://127.0.0.1:40000 https://api.ipquery.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果返回的是 Cloudflare 的 IP，则说明 WARP 正常工作。&lt;/p>
&lt;h3 id="安装-sing-box">&lt;a href="#%e5%ae%89%e8%a3%85-sing-box" class="header-anchor">&lt;/a>安装 sing-box
&lt;/h3>&lt;p>我个人比较习惯把各种服务安装在容器里，所以这里使用 Docker。&lt;/p>
&lt;p>&lt;code>docker-compose.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sing-box&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ghcr.io/sagernet/sing-box&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sing-box&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 host 模式，方便后续暴露代理端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">network_mode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">host&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./config:/etc/sing-box/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="l">D /var/lib/sing-box -C /etc/sing-box/ run&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">json-file&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">max-size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;5m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">max-file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个 &lt;code>config&lt;/code> 目录，用来存放配置文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后创建一个 &lt;code>outbound.json&lt;/code> 文件，用来定义出口。WARP 官方客户端默认的代理端口是 socks5 协议的 40000 端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim config/outbound.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outbounds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tag&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_warp_out&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">40000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个 &lt;code>inbound.json&lt;/code> 文件，用来定义代理入口。这里我使用 socks5 协议，并最好设置用户名密码保证安全。（有动手能力的可以看看文档换一个更安全的协议，这里不多说）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim config/inbound.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inbounds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;::&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21080&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tag&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_warp_in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;username&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;password&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后我们需要定义入口流量如何走到出口的规则，也就是路由（routing）。这里我直接把所有流量都路由到 WARP 出口了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim config/routing.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rules&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_warp_in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 这里填 inbound 的 tag
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 这里填 route，表示路由
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_warp_out&amp;#34;&lt;/span> &lt;span class="c1">// 这里填 outbound 的 tag
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时所有配置都已经写好了，我们可以启动 sing-box 了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动成功后，我们可以看一下 sing-box 的日志，确保没有报错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker logs -f sing-box
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果日志中没有报错，则说明 sing-box 正常工作。&lt;/p>
&lt;h3 id="测试">&lt;a href="#%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>测试
&lt;/h3>&lt;p>用 curl 测试一下代理是否正常工作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -x socks5://127.0.0.1:21080 https://api.ipquery.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果返回的是与之前相同的 IP，则说明代理正常工作。&lt;/p>
&lt;p>再到本地测试一下代理是否正常工作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -x socks5://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;你的 VPS 的 IP&amp;gt;:21080 https://api.ipquery.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果 IP 与上面相同，就可以使用了。&lt;/p>
&lt;h3 id="扩展">&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">&lt;/a>扩展
&lt;/h3>&lt;p>细心的你可能会发现，某些软件是不支持 socks5 带用户名密码验证的，比如浏览器。更有甚者不支持 socks5 协议，如果能配置成 http 协议，基本就能通杀所有软件了。当然我们此处依然可以用 sing-box 来实现。用一串链式代理，把本地的 http 协议转换成远端的 socks5 协议，再通过 WARP 代理出去。&lt;/p>
&lt;p>本地有两种配置方法:&lt;/p>
&lt;ul>
&lt;li>如果你是 Windows 系统，推荐你下载 sing-box 二进制文件，然后用 nssm 服务化。&lt;/li>
&lt;li>如果你是 macOS/Linux 系统，那我的推荐还是 Docker 容器化。&lt;/li>
&lt;/ul>
&lt;p>笔者两种都有用到。在这里简述一下 Windows 系统的配置方法。&lt;/p>
&lt;p>首先前往 &lt;a class="link" href="https://github.com/SagerNet/sing-box/releases" target="_blank" rel="noopener"
>releases&lt;/a> 页面，下载 sing-box 二进制文件。解压得到 &lt;code>sing-box.exe&lt;/code> 文件。&lt;/p>
&lt;p>然后前往 &lt;a class="link" href="https://nssm.cc/download" target="_blank" rel="noopener"
>nssm&lt;/a> 页面，下载 nssm 二进制文件。解压出 &lt;code>win64/nssm.exe&lt;/code> 文件就可以了。&lt;/p>
&lt;blockquote>
&lt;p>建议把命令行软件都整理到一起方便使用，笔者自己的习惯是放在数据盘的 &lt;code>soft/bin&lt;/code> 目录下。&lt;/p>&lt;/blockquote>
&lt;p>准备一个目录，用来存放 sing-box 的配置文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">New-Item&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="s2">&amp;#34;C:\Users\&amp;lt;你的用户名&amp;gt;&amp;#34;&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="s2">&amp;#34;.sing-box&amp;#34;&lt;/span> &lt;span class="n">-ItemType&lt;/span> &lt;span class="n">Directory&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>nssm.exe&lt;/code> 所在目录打开 PowerShell，输入以下命令，创建一个服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nssm install sing-box
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把启动目录设置为 &lt;code>sing-box.exe&lt;/code> 所在目录，启动命令设置为 &lt;code>&amp;lt;sing-box.exe 的绝对路径&amp;gt; -C &amp;lt;sing-box 配置文件路径&amp;gt;&lt;/code>。如果有看日志的需求的话，建议把 stdout 和 stderr 都设置为 &lt;code>C:\Users\&amp;lt;你的用户名&amp;gt;\.sing-box\sing-box.log&lt;/code>。&lt;/p>
&lt;p>最后点击 &lt;code>Install Service&lt;/code> 完成创建。&lt;/p>
&lt;p>接着就可以开始准备 sing-box 的配置文件了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">New-Item&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="s2">&amp;#34;C:\Users\&amp;lt;你的用户名&amp;gt;\.sing-box&amp;#34;&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="s2">&amp;#34;config.json&amp;#34;&lt;/span> &lt;span class="n">-ItemType&lt;/span> &lt;span class="n">File&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inbounds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里可以根据需要添加多个 inbound，比如无密码的 socks5 或者 http 的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21080&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tag&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http_in&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listen_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21081&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tag&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_in&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outbounds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;你的 VPS 的 IP&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21080&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tag&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_remote_warp_out&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;username&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;password&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rules&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 然后把所有入口的流量都路由到远端的 socks5 出口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http_in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_remote_warp_out&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;socks5_remote_warp_out&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而后进入 Windows 服务管理器，启动 &lt;code>sing-box&lt;/code> 服务即可。观察日志，确保没有报错。然后就可以爽用了。实测用来进行爬虫测试，效果还是不错的，也不用担心污染自己的 IP。&lt;/p>
&lt;p>如果想要获得 IP 池，可以把 Cloudflare WARP 配置文件转 wireguard，同时连接多个，使用 sing-box 进行负载均衡。这里就不做展开了，如果以后有需要的话，可以再写一篇。&lt;/p></description></item><item><title>Cloudflare R2+CDN缓存实现无限配额图床</title><link>https://labs.kmou424.moe/p/cloudflare-r2-image-hosting/</link><pubDate>Wed, 01 May 2024 19:22:00 +0800</pubDate><guid>https://labs.kmou424.moe/p/cloudflare-r2-image-hosting/</guid><description>&lt;h3 id="前言">&lt;a href="#%e5%89%8d%e8%a8%80" class="header-anchor">&lt;/a>前言
&lt;/h3>&lt;p>这不刚重建了博客吗，既然要写博客，那文章中的图片自然也是重要的组成部分。对于图片通常有两种解决方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>直接塞给博客程序管理，由本站直接提供图片&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用外挂的图床/对象存储服务，通过外链的方式引入文章&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>咱们当然选择后者，毕竟部署本站的香港小鸡也不是无限流量，要是&lt;del>某天本站火了&lt;/del>遇到大流量的情况不得直接暴毙了。（当然其实也不是不能用这种方案，比如用带慈善家 Cloudflare 开启小云朵做全站缓存也是 OK 的，图片能够全部命中缓存。但是本站服务器在香港，套一层 Cloudflare CDN 的话那浏览体验我都不敢想。）&lt;/p>
&lt;p>上网找了一圈，听说七牛云挺好的，闻言博主就去瞅了瞅，还发现自己曾经注册过账号。但是不知道为什么他们家登录页面响应式全部挂掉了，登也登不上，只能找找其他服务商了。&lt;/p>
&lt;p>但说实在的，博主用的服务一般会追求稳妥，即考虑极端情况。这么一想，那些可以白嫖的对象存储服务也都有限额，稍不注意被恶意刷流量，导致超出额度了可不就难受了吗（叠个甲：博主没有预设人性丑恶，只是多年上网冲浪的经验）。所以结论是，还是得找一个能命中 CDN 缓存的服务。如果用 OSS+CDN 的话几乎是没有可白嫖的，这时我想到了带慈善家 Cloudflare。&lt;/p>
&lt;p>此前博主是不知道 Cloudflare 提供对象存储服务的，上网查了一下才知道他们家的对象存储服务叫 R2，提供免费的每月 10G 空间、1000 万次读操作、100 万次写操作，并且存储桶默认都在他们家自己的节点上（这不废话），本身图片就是静态资源，这样的话，只要路径统一，岂不是可以把图片缓存在他们家的边缘节点上实现免费无限配额？&lt;/p>
&lt;h3 id="部署">&lt;a href="#%e9%83%a8%e7%bd%b2" class="header-anchor">&lt;/a>部署
&lt;/h3>&lt;h4 id="激活-r2-服务">&lt;a href="#%e6%bf%80%e6%b4%bb-r2-%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>激活 R2 服务
&lt;/h4>&lt;p>先前往 &lt;a class="link" href="https://dash.cloudflare.com/" target="_blank" rel="noopener"
>Cloudflare Dashboard&lt;/a> 打开侧边栏，进入 R2 页面。&lt;/p>
&lt;p>需要绑一张信用卡（或者 PayPal 也是可以的）后才能激活 R2，这里就自行解决了。&lt;/p>
&lt;h4 id="创建存储桶">&lt;a href="#%e5%88%9b%e5%bb%ba%e5%ad%98%e5%82%a8%e6%a1%b6" class="header-anchor">&lt;/a>创建存储桶
&lt;/h4>&lt;p>名字随意，地区可以选一下亚太地区（会影响存储桶选择节点的倾向）。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/7bf1d6388906f335a7762ea08ebff3ded61e196400fe0cbd888628c9c565586f.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/ed4a3a31650753503b07a6ab753fb27359535817b271f70ba74ac71ea8cc25a6.png"
loading="lazy"
>&lt;/p>
&lt;p>现在就可以来到对象这一栏上传图片，使用你绑定的域名/图片路径即可访问。如：&lt;a class="link" href="https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png" target="_blank" rel="noopener"
>https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png"
loading="lazy"
>&lt;/p>
&lt;p>截至目前图床已经可以正常使用了，但是还不够，还需要配置缓存规则使得对图片的请求全部命中在 Cloudflare 边缘节点上的缓存。&lt;/p>
&lt;h4 id="配置缓存">&lt;a href="#%e9%85%8d%e7%bd%ae%e7%bc%93%e5%ad%98" class="header-anchor">&lt;/a>配置缓存
&lt;/h4>&lt;p>转到你的域名对应的 Zone，打开侧边栏-&amp;gt;Caching/缓存-&amp;gt;Cache Rules，点击创建规则来配置一条专门用于图床的规则。&lt;/p>
&lt;p>同样是名称随意，匹配规则里选择&lt;strong>字段：URL 完整，运算符：包含，值：https://img.kmou424.moe/（即你刚刚配置的图床域名）&lt;/strong>。这条规则的含义是以此 URL 请求的资源会命中这条缓存规则。&lt;/p>
&lt;p>缓存资格选择符合缓存条件，如果选绕过缓存的话，会禁用缓存。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/f7ab248173caf819dcd48ff4edb92dd16543d56084defc76a33bba7cb34b150e.png"
loading="lazy"
>&lt;/p>
&lt;p>边缘 TTL，即缓存在 Cloudflare 边缘节点上的过期时间，我这里设为了 6 个月，代表图片缓存后 6 个月才会过期：第一次请求时会把图片缓存上去，接下来 6 个月内的请求都会命中这个缓存，等到过期后的第一次请求才会去存储桶中获取文件并再次缓存（过期前删除了存储桶中的文件也不会影响这里的缓存，除非手动清除）。&lt;/p>
&lt;p>浏览器 TTL 是响应中返回给浏览器的建议过期时间，这里我选择的是 8 小时。图片会留存在浏览器的缓存中 8 小时，期间如果再次访问图片，返回的状态码将会是 304 Not Modified（资源是从本地缓存中取出的）。如果没有手动清除浏览器缓存，则图片应当会在 8 小时后过期，并从本地缓存中清除掉。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/9fd93f0aa80dea8d39c6cb27645fc89c372713389452d714d7a0318b74b2ebe5.png"
loading="lazy"
>&lt;/p>
&lt;p>编辑好后，点击页面底部的部署即可生效（30s 左右）。&lt;/p>
&lt;h4 id="完成">&lt;a href="#%e5%ae%8c%e6%88%90" class="header-anchor">&lt;/a>完成
&lt;/h4>&lt;p>至此整个部署过程就已经完成，接下来只需要在文章中引用图床 URL/路径即可访问到上传的图片，进缓存之后就不用再担心配额的消耗问题了。&lt;/p>
&lt;h3 id="测试">&lt;a href="#%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>测试
&lt;/h3>&lt;p>作为一个稳健的白嫖党，那还是要测试一下缓存保不保真的，万一没缓存上那就要花 dollar 了，这可是钱的事，对于博主这种穷逼来说，要是整点账单出来就得饿饭了。&lt;/p>
&lt;p>所以就在写本文的今天（2024/5/1）下午 5:40 左右，博主使用 Apifox 做了一个小压测（模拟请求图片资源），并发拉到 100，一共测试了 10 分钟。测试结果如图：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/71b3107694908661edaf5a69fe02527430fc23075059fba04a6a69dd2bd22368.png"
loading="lazy"
>&lt;/p>
&lt;p>可以看到一共请求了约 2.4w 次（不过并发是一直上不去，且比较平稳，看来是 Cloudflare 给限到这个水平了）。等待到 6 点之后，来看看 Cloudflare 的 Zone 统计数据：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/5bfc701aed79c99aa4012f6397c8da4f568d0e1b296ebf2678c1387fe758f6cb.png"
loading="lazy"
>&lt;/p>
&lt;p>看上去是成了，一小时内命中缓存的比例达到了&lt;del>惊人的&lt;/del> 96%，这还是针对这整个二级域名的数据（实际上还挂有其他服务，并且是关掉缓存的）。&lt;/p>
&lt;p>再来看看 R2 的统计数据：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/2e86fcf675f437fca6a040fe83e36909bfbb58b61a63acc4c3a337316b1a109c.png"
loading="lazy"
>&lt;/p>
&lt;p>R2 的数据很奇怪，B 类操作（即读取）比起开测之前涨了 300 多，开测之前博主大概看了一下是 66 来着。不知道在这 2.4w 次请求里为什么会有这么 300 次没有命中缓存，太奇怪了嗷。&lt;/p>
&lt;p>不过这样的效果已经很好了，个人博客使用根本不可能把每月的免费配额花完。至此，这个免费 10G 无限配额的图床就搭好了。&lt;/p>
&lt;p>白嫖，爽！&lt;/p></description></item></channel></rss>