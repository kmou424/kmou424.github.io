[{"content":"最近有一些爬多媒体网站的需求，自己手上又没有太多机器，IP 池也不够用，突然想到了之前折腾过的 Cloudflare WARP，于是就想着能不能用它来搭建一个链式代理，为爬虫提供稳定的干净 IP。 当然，在这之前还是得先准备一台国外 VPS。由于国内直连 Cloudflare WARP 丢包和延迟是在有点感人。国外的大水管 VPS 价格也相当便宜，可以考虑省预算买美西的 VPS，或者预算充足的话买香港的 VPS（选择你运营商的国际优化线路，费用也不会太贵）。\n安装 Cloudflare WARP 按照官网上的教程添加软件源（这里我用的是 Debian 12），然后安装 Cloudflare WARP 客户端。\n1 2 3 4 5 6 7 8 # Add cloudflare gpg key curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg # Add this repo to your apt repositories echo \u0026#34;deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main\u0026#34; | sudo tee /etc/apt/sources.list.d/cloudflare-client.list # Install sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install cloudflare-warp 安装好之后，可以自由选择要不要搞一个 WARP+ license 整个无限流量（约为 1923837100 GB），这里我就不赘述。然后把 warp-cli 模式设置为仅代理。\n1 2 3 4 5 # 连接 WARP warp-cli connect # 设置为仅代理 warp-cli set-mode proxy 来用 curl 测试一下 WARP 是否正常工作。\n1 curl -x socks5://127.0.0.1:40000 https://api.ipquery.io 如果返回的是 Cloudflare 的 IP，则说明 WARP 正常工作。\n安装 sing-box 我个人比较习惯把各种服务安装在容器里，所以这里使用 Docker。\ndocker-compose.yaml:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 services: sing-box: image: ghcr.io/sagernet/sing-box container_name: sing-box restart: always # 使用 host 模式，方便后续暴露代理端口 network_mode: host volumes: - ./config:/etc/sing-box/ command: -D /var/lib/sing-box -C /etc/sing-box/ run logging: driver: json-file options: max-size: \u0026#34;5m\u0026#34; max-file: \u0026#34;3\u0026#34; 创建一个 config 目录，用来存放配置文件。\n1 mkdir -p config 然后创建一个 outbound.json 文件，用来定义出口。WARP 官方客户端默认的代理端口是 socks5 协议的 40000 端口。\n1 vim config/outbound.json 1 2 3 4 5 6 7 8 9 10 { \u0026#34;outbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;socks5_warp_out\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;server_port\u0026#34;: 40000 } ] } 创建一个 inbound.json 文件，用来定义代理入口。这里我使用 socks5 协议，并最好设置用户名密码保证安全。（有动手能力的可以看看文档换一个更安全的协议，这里不多说）\n1 vim config/inbound.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;listen\u0026#34;: \u0026#34;::\u0026#34;, \u0026#34;listen_port\u0026#34;: 21080, \u0026#34;tag\u0026#34;: \u0026#34;socks5_warp_in\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;username\u0026#34;: \u0026#34;\u0026lt;username\u0026gt;\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026lt;password\u0026gt;\u0026#34; } ] } ] } 最后我们需要定义入口流量如何走到出口的规则，也就是路由（routing）。这里我直接把所有流量都路由到 WARP 出口了。\n1 vim config/routing.json 1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;route\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;inbound\u0026#34;: \u0026#34;socks5_warp_in\u0026#34;, // 这里填 inbound 的 tag \u0026#34;action\u0026#34;: \u0026#34;route\u0026#34;, // 这里填 route，表示路由 \u0026#34;outbound\u0026#34;: \u0026#34;socks5_warp_out\u0026#34; // 这里填 outbound 的 tag } ] } } 这时所有配置都已经写好了，我们可以启动 sing-box 了。\n1 docker compose up -d 启动成功后，我们可以看一下 sing-box 的日志，确保没有报错。\n1 docker logs -f sing-box 如果日志中没有报错，则说明 sing-box 正常工作。\n测试 用 curl 测试一下代理是否正常工作。\n1 curl -x socks5://127.0.0.1:21080 https://api.ipquery.io 如果返回的是与之前相同的 IP，则说明代理正常工作。\n再到本地测试一下代理是否正常工作。\n1 curl -x socks5://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;你的 VPS 的 IP\u0026gt;:21080 https://api.ipquery.io 如果 IP 与上面相同，就可以使用了。\n扩展 细心的你可能会发现，某些软件是不支持 socks5 带用户名密码验证的，比如浏览器。更有甚者不支持 socks5 协议，如果能配置成 http 协议，基本就能通杀所有软件了。当然我们此处依然可以用 sing-box 来实现。用一串链式代理，把本地的 http 协议转换成远端的 socks5 协议，再通过 WARP 代理出去。\n本地有两种配置方法:\n如果你是 Windows 系统，推荐你下载 sing-box 二进制文件，然后用 nssm 服务化。 如果你是 macOS/Linux 系统，那我的推荐还是 Docker 容器化。 笔者两种都有用到。在这里简述一下 Windows 系统的配置方法。\n首先前往 releases 页面，下载 sing-box 二进制文件。解压得到 sing-box.exe 文件。\n然后前往 nssm 页面，下载 nssm 二进制文件。解压出 win64/nssm.exe 文件就可以了。\n建议把命令行软件都整理到一起方便使用，笔者自己的习惯是放在数据盘的 soft/bin 目录下。\n准备一个目录，用来存放 sing-box 的配置文件。\n1 New-Item -Path \u0026#34;C:\\Users\\\u0026lt;你的用户名\u0026gt;\u0026#34; -Name \u0026#34;.sing-box\u0026#34; -ItemType Directory 在 nssm.exe 所在目录打开 PowerShell，输入以下命令，创建一个服务。\n1 nssm install sing-box 把启动目录设置为 sing-box.exe 所在目录，启动命令设置为 \u0026lt;sing-box.exe 的绝对路径\u0026gt; -C \u0026lt;sing-box 配置文件路径\u0026gt;。如果有看日志的需求的话，建议把 stdout 和 stderr 都设置为 C:\\Users\\\u0026lt;你的用户名\u0026gt;\\.sing-box\\sing-box.log。\n最后点击 Install Service 完成创建。\n接着就可以开始准备 sing-box 的配置文件了。\n1 New-Item -Path \u0026#34;C:\\Users\\\u0026lt;你的用户名\u0026gt;\\.sing-box\u0026#34; -Name \u0026#34;config.json\u0026#34; -ItemType File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { \u0026#34;inbounds\u0026#34;: [ // 这里可以根据需要添加多个 inbound，比如无密码的 socks5 或者 http 的 { \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;listen_port\u0026#34;: 21080, \u0026#34;tag\u0026#34;: \u0026#34;http_in\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;listen_port\u0026#34;: 21081, \u0026#34;tag\u0026#34;: \u0026#34;socks5_in\u0026#34; } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026lt;你的 VPS 的 IP\u0026gt;\u0026#34;, \u0026#34;server_port\u0026#34;: 21080, \u0026#34;tag\u0026#34;: \u0026#34;socks5_remote_warp_out\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;\u0026lt;username\u0026gt;\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026lt;password\u0026gt;\u0026#34; } ], \u0026#34;route\u0026#34;: { \u0026#34;rules\u0026#34;: [ // 然后把所有入口的流量都路由到远端的 socks5 出口 { \u0026#34;inbound\u0026#34;: \u0026#34;http_in\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;route\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;socks5_remote_warp_out\u0026#34; }, { \u0026#34;inbound\u0026#34;: \u0026#34;socks5_in\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;route\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;socks5_remote_warp_out\u0026#34; } ] ] } 而后进入 Windows 服务管理器，启动 sing-box 服务即可。观察日志，确保没有报错。然后就可以爽用了。实测用来进行爬虫测试，效果还是不错的，也不用担心污染自己的 IP。\n如果想要获得 IP 池，可以把 Cloudflare WARP 配置文件转 wireguard，同时连接多个，使用 sing-box 进行负载均衡。这里就不做展开了，如果以后有需要的话，可以再写一篇。\n","date":"2025-07-14T18:38:22+08:00","permalink":"https://labs.kmou424.moe/p/sing-box-chain-proxy-for-crawler/","title":"用 sing-box + Cloudflare WARP 搭建链式代理，为爬虫提供稳定 IP"},{"content":"前言 这不刚重建了博客吗，既然要写博客，那文章中的图片自然也是重要的组成部分。对于图片通常有两种解决方案：\n直接塞给博客程序管理，由本站直接提供图片\n使用外挂的图床/对象存储服务，通过外链的方式引入文章\n咱们当然选择后者，毕竟部署本站的香港小鸡也不是无限流量，要是某天本站火了遇到大流量的情况不得直接暴毙了。（当然其实也不是不能用这种方案，比如用带慈善家 Cloudflare 开启小云朵做全站缓存也是 OK 的，图片能够全部命中缓存。但是本站服务器在香港，套一层 Cloudflare CDN 的话那浏览体验我都不敢想。）\n上网找了一圈，听说七牛云挺好的，闻言博主就去瞅了瞅，还发现自己曾经注册过账号。但是不知道为什么他们家登录页面响应式全部挂掉了，登也登不上，只能找找其他服务商了。\n但说实在的，博主用的服务一般会追求稳妥，即考虑极端情况。这么一想，那些可以白嫖的对象存储服务也都有限额，稍不注意被恶意刷流量，导致超出额度了可不就难受了吗（叠个甲：博主没有预设人性丑恶，只是多年上网冲浪的经验）。所以结论是，还是得找一个能命中 CDN 缓存的服务。如果用 OSS+CDN 的话几乎是没有可白嫖的，这时我想到了带慈善家 Cloudflare。\n此前博主是不知道 Cloudflare 提供对象存储服务的，上网查了一下才知道他们家的对象存储服务叫 R2，提供免费的每月 10G 空间、1000 万次读操作、100 万次写操作，并且存储桶默认都在他们家自己的节点上（这不废话），本身图片就是静态资源，这样的话，只要路径统一，岂不是可以把图片缓存在他们家的边缘节点上实现免费无限配额？\n部署 激活 R2 服务 先前往 Cloudflare Dashboard 打开侧边栏，进入 R2 页面。\n需要绑一张信用卡（或者 PayPal 也是可以的）后才能激活 R2，这里就自行解决了。\n创建存储桶 名字随意，地区可以选一下亚太地区（会影响存储桶选择节点的倾向）。\n现在就可以来到对象这一栏上传图片，使用你绑定的域名/图片路径即可访问。如：https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png\n截至目前图床已经可以正常使用了，但是还不够，还需要配置缓存规则使得对图片的请求全部命中在 Cloudflare 边缘节点上的缓存。\n配置缓存 转到你的域名对应的 Zone，打开侧边栏-\u0026gt;Caching/缓存-\u0026gt;Cache Rules，点击创建规则来配置一条专门用于图床的规则。\n同样是名称随意，匹配规则里选择字段：URL 完整，运算符：包含，值：https://img.kmou424.moe/（即你刚刚配置的图床域名）。这条规则的含义是以此 URL 请求的资源会命中这条缓存规则。\n缓存资格选择符合缓存条件，如果选绕过缓存的话，会禁用缓存。\n边缘 TTL，即缓存在 Cloudflare 边缘节点上的过期时间，我这里设为了 6 个月，代表图片缓存后 6 个月才会过期：第一次请求时会把图片缓存上去，接下来 6 个月内的请求都会命中这个缓存，等到过期后的第一次请求才会去存储桶中获取文件并再次缓存（过期前删除了存储桶中的文件也不会影响这里的缓存，除非手动清除）。\n浏览器 TTL 是响应中返回给浏览器的建议过期时间，这里我选择的是 8 小时。图片会留存在浏览器的缓存中 8 小时，期间如果再次访问图片，返回的状态码将会是 304 Not Modified（资源是从本地缓存中取出的）。如果没有手动清除浏览器缓存，则图片应当会在 8 小时后过期，并从本地缓存中清除掉。\n编辑好后，点击页面底部的部署即可生效（30s 左右）。\n完成 至此整个部署过程就已经完成，接下来只需要在文章中引用图床 URL/路径即可访问到上传的图片，进缓存之后就不用再担心配额的消耗问题了。\n测试 作为一个稳健的白嫖党，那还是要测试一下缓存保不保真的，万一没缓存上那就要花 dollar 了，这可是钱的事，对于博主这种穷逼来说，要是整点账单出来就得饿饭了。\n所以就在写本文的今天（2024/5/1）下午 5:40 左右，博主使用 Apifox 做了一个小压测（模拟请求图片资源），并发拉到 100，一共测试了 10 分钟。测试结果如图：\n可以看到一共请求了约 2.4w 次（不过并发是一直上不去，且比较平稳，看来是 Cloudflare 给限到这个水平了）。等待到 6 点之后，来看看 Cloudflare 的 Zone 统计数据：\n看上去是成了，一小时内命中缓存的比例达到了惊人的 96%，这还是针对这整个二级域名的数据（实际上还挂有其他服务，并且是关掉缓存的）。\n再来看看 R2 的统计数据：\nR2 的数据很奇怪，B 类操作（即读取）比起开测之前涨了 300 多，开测之前博主大概看了一下是 66 来着。不知道在这 2.4w 次请求里为什么会有这么 300 次没有命中缓存，太奇怪了嗷。\n不过这样的效果已经很好了，个人博客使用根本不可能把每月的免费配额花完。至此，这个免费 10G 无限配额的图床就搭好了。\n白嫖，爽！\n","date":"2024-05-01T19:22:00+08:00","permalink":"https://labs.kmou424.moe/p/cloudflare-r2-image-hosting/","title":"Cloudflare R2+CDN缓存实现无限配额图床"},{"content":" 标题灵感来源于 初音未来十周年专辑《Re:Start》。\n重启博客 时隔几年，突然又来了写博客的兴趣了。\n开始的契机是最近看见朋友在写博客程序，想到这几年一堆东西没有记录而且总是忘掉，故有了一些写博客的想法了。\n但是这还不足以让我这种懒批开始写博客，后来又想到现在的笔记也不够好用，Notion 虽然能满足一些需求，但没办法让我回顾的时候作为技术参考，还是有些难顶的，于是我就开始计划写博客了，主要想起到两个作用：一是当笔记用；二是分享一下技术，顺便也能借助评论区讨论一下。\n再者，近些年发现自己表达欲真的挺强的，每天总是能喋喋不休说一大堆。不过上网冲浪多了之后，发现表达能力确确实实是退步了太多，打字聊天只会那么几句了，说不出什么有营养的话来，平时聊天更是憋不出来半句。整天就是引经据典（说实话，多少是有点抖机灵的成分在里边的），很明显感觉到自己语言能力的退步，也该做下复健了。\n结合上面原因，又因为现在也上班了，我就开始寻找适合建站的 VPS 了，此处过程就省略，反正最后也没花几个钱就拿下了一台 BGP 线路还算可以的香港主机。\n买到机子后，搭了这个我以前从来没用过的 Halo 博客（倒是用过 typecho、wordpress 还有 hexo 啥的）。虽然感觉这程序蛮好用的，但是一想到后端是 Java 我心里还是有点发怵，我这小鸡怕是有可能顶不住啊。不过这都是后话了，顶不住再想办法吧。（现在已经迁移到 hugo 了）\n近期规划 近期就打算梳理一下这几年学的东西，做的一些小玩意，都拿出来整理思路并分享一下吧，可能并没有什么技术含量，甚至有一些在现在的我看来就是史。但是从来都没有人规定过“互联网禁止拉史”吧，写出来也算是防止我以后再造出相同的史吧。说不定对新手来说还挺有参考价值，毕竟谁不是从新手阶段踩坑过来的呢。虽然我也还在学习 ing，但是我已经入门了！（骄傲）\n就写到这里吧，现在还在语言系统康复期，感觉还是打一句话卡半天。这下更是要少上网了（这就是上网上多了的后果.jpg）。重启博客任重而道远啊（迫真）。\n","date":"2024-04-29T23:59:00+08:00","permalink":"https://labs.kmou424.moe/p/restart/","title":"Re:Start"}]