<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CDN on SaikaLab</title><link>https://labs.kmou424.moe/tags/cdn/</link><description>Recent content in CDN on SaikaLab</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 01 May 2024 19:22:00 +0800</lastBuildDate><atom:link href="https://labs.kmou424.moe/tags/cdn/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudflare R2+CDN缓存实现无限配额图床</title><link>https://labs.kmou424.moe/p/cloudflare-r2-image-hosting/</link><pubDate>Wed, 01 May 2024 19:22:00 +0800</pubDate><guid>https://labs.kmou424.moe/p/cloudflare-r2-image-hosting/</guid><description>&lt;h3 id="前言">&lt;a href="#%e5%89%8d%e8%a8%80" class="header-anchor">&lt;/a>前言
&lt;/h3>&lt;p>这不刚重建了博客吗，既然要写博客，那文章中的图片自然也是重要的组成部分。对于图片通常有两种解决方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>直接塞给博客程序管理，由本站直接提供图片&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用外挂的图床/对象存储服务，通过外链的方式引入文章&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>咱们当然选择后者，毕竟部署本站的香港小鸡也不是无限流量，要是&lt;del>某天本站火了&lt;/del>遇到大流量的情况不得直接暴毙了。（当然其实也不是不能用这种方案，比如用带慈善家 Cloudflare 开启小云朵做全站缓存也是 OK 的，图片能够全部命中缓存。但是本站服务器在香港，套一层 Cloudflare CDN 的话那浏览体验我都不敢想。）&lt;/p>
&lt;p>上网找了一圈，听说七牛云挺好的，闻言博主就去瞅了瞅，还发现自己曾经注册过账号。但是不知道为什么他们家登录页面响应式全部挂掉了，登也登不上，只能找找其他服务商了。&lt;/p>
&lt;p>但说实在的，博主用的服务一般会追求稳妥，即考虑极端情况。这么一想，那些可以白嫖的对象存储服务也都有限额，稍不注意被恶意刷流量，导致超出额度了可不就难受了吗（叠个甲：博主没有预设人性丑恶，只是多年上网冲浪的经验）。所以结论是，还是得找一个能命中 CDN 缓存的服务。如果用 OSS+CDN 的话几乎是没有可白嫖的，这时我想到了带慈善家 Cloudflare。&lt;/p>
&lt;p>此前博主是不知道 Cloudflare 提供对象存储服务的，上网查了一下才知道他们家的对象存储服务叫 R2，提供免费的每月 10G 空间、1000 万次读操作、100 万次写操作，并且存储桶默认都在他们家自己的节点上（这不废话），本身图片就是静态资源，这样的话，只要路径统一，岂不是可以把图片缓存在他们家的边缘节点上实现免费无限配额？&lt;/p>
&lt;h3 id="部署">&lt;a href="#%e9%83%a8%e7%bd%b2" class="header-anchor">&lt;/a>部署
&lt;/h3>&lt;h4 id="激活-r2-服务">&lt;a href="#%e6%bf%80%e6%b4%bb-r2-%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>激活 R2 服务
&lt;/h4>&lt;p>先前往 &lt;a class="link" href="https://dash.cloudflare.com/" target="_blank" rel="noopener"
>Cloudflare Dashboard&lt;/a> 打开侧边栏，进入 R2 页面。&lt;/p>
&lt;p>需要绑一张信用卡（或者 PayPal 也是可以的）后才能激活 R2，这里就自行解决了。&lt;/p>
&lt;h4 id="创建存储桶">&lt;a href="#%e5%88%9b%e5%bb%ba%e5%ad%98%e5%82%a8%e6%a1%b6" class="header-anchor">&lt;/a>创建存储桶
&lt;/h4>&lt;p>名字随意，地区可以选一下亚太地区（会影响存储桶选择节点的倾向）。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/7bf1d6388906f335a7762ea08ebff3ded61e196400fe0cbd888628c9c565586f.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/ed4a3a31650753503b07a6ab753fb27359535817b271f70ba74ac71ea8cc25a6.png"
loading="lazy"
>&lt;/p>
&lt;p>现在就可以来到对象这一栏上传图片，使用你绑定的域名/图片路径即可访问。如：&lt;a class="link" href="https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png" target="_blank" rel="noopener"
>https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/4ffdff92ffce796eec152512472a95a4c7d73fbef57a76641b2ab16710da9d67.png"
loading="lazy"
>&lt;/p>
&lt;p>截至目前图床已经可以正常使用了，但是还不够，还需要配置缓存规则使得对图片的请求全部命中在 Cloudflare 边缘节点上的缓存。&lt;/p>
&lt;h4 id="配置缓存">&lt;a href="#%e9%85%8d%e7%bd%ae%e7%bc%93%e5%ad%98" class="header-anchor">&lt;/a>配置缓存
&lt;/h4>&lt;p>转到你的域名对应的 Zone，打开侧边栏-&amp;gt;Caching/缓存-&amp;gt;Cache Rules，点击创建规则来配置一条专门用于图床的规则。&lt;/p>
&lt;p>同样是名称随意，匹配规则里选择&lt;strong>字段：URL 完整，运算符：包含，值：https://img.kmou424.moe/（即你刚刚配置的图床域名）&lt;/strong>。这条规则的含义是以此 URL 请求的资源会命中这条缓存规则。&lt;/p>
&lt;p>缓存资格选择符合缓存条件，如果选绕过缓存的话，会禁用缓存。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/f7ab248173caf819dcd48ff4edb92dd16543d56084defc76a33bba7cb34b150e.png"
loading="lazy"
>&lt;/p>
&lt;p>边缘 TTL，即缓存在 Cloudflare 边缘节点上的过期时间，我这里设为了 6 个月，代表图片缓存后 6 个月才会过期：第一次请求时会把图片缓存上去，接下来 6 个月内的请求都会命中这个缓存，等到过期后的第一次请求才会去存储桶中获取文件并再次缓存（过期前删除了存储桶中的文件也不会影响这里的缓存，除非手动清除）。&lt;/p>
&lt;p>浏览器 TTL 是响应中返回给浏览器的建议过期时间，这里我选择的是 8 小时。图片会留存在浏览器的缓存中 8 小时，期间如果再次访问图片，返回的状态码将会是 304 Not Modified（资源是从本地缓存中取出的）。如果没有手动清除浏览器缓存，则图片应当会在 8 小时后过期，并从本地缓存中清除掉。&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/9fd93f0aa80dea8d39c6cb27645fc89c372713389452d714d7a0318b74b2ebe5.png"
loading="lazy"
>&lt;/p>
&lt;p>编辑好后，点击页面底部的部署即可生效（30s 左右）。&lt;/p>
&lt;h4 id="完成">&lt;a href="#%e5%ae%8c%e6%88%90" class="header-anchor">&lt;/a>完成
&lt;/h4>&lt;p>至此整个部署过程就已经完成，接下来只需要在文章中引用图床 URL/路径即可访问到上传的图片，进缓存之后就不用再担心配额的消耗问题了。&lt;/p>
&lt;h3 id="测试">&lt;a href="#%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>测试
&lt;/h3>&lt;p>作为一个稳健的白嫖党，那还是要测试一下缓存保不保真的，万一没缓存上那就要花 dollar 了，这可是钱的事，对于博主这种穷逼来说，要是整点账单出来就得饿饭了。&lt;/p>
&lt;p>所以就在写本文的今天（2024/5/1）下午 5:40 左右，博主使用 Apifox 做了一个小压测（模拟请求图片资源），并发拉到 100，一共测试了 10 分钟。测试结果如图：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/71b3107694908661edaf5a69fe02527430fc23075059fba04a6a69dd2bd22368.png"
loading="lazy"
>&lt;/p>
&lt;p>可以看到一共请求了约 2.4w 次（不过并发是一直上不去，且比较平稳，看来是 Cloudflare 给限到这个水平了）。等待到 6 点之后，来看看 Cloudflare 的 Zone 统计数据：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/5bfc701aed79c99aa4012f6397c8da4f568d0e1b296ebf2678c1387fe758f6cb.png"
loading="lazy"
>&lt;/p>
&lt;p>看上去是成了，一小时内命中缓存的比例达到了&lt;del>惊人的&lt;/del> 96%，这还是针对这整个二级域名的数据（实际上还挂有其他服务，并且是关掉缓存的）。&lt;/p>
&lt;p>再来看看 R2 的统计数据：&lt;/p>
&lt;p>&lt;img src="https://img.kmou424.moe/2e86fcf675f437fca6a040fe83e36909bfbb58b61a63acc4c3a337316b1a109c.png"
loading="lazy"
>&lt;/p>
&lt;p>R2 的数据很奇怪，B 类操作（即读取）比起开测之前涨了 300 多，开测之前博主大概看了一下是 66 来着。不知道在这 2.4w 次请求里为什么会有这么 300 次没有命中缓存，太奇怪了嗷。&lt;/p>
&lt;p>不过这样的效果已经很好了，个人博客使用根本不可能把每月的免费配额花完。至此，这个免费 10G 无限配额的图床就搭好了。&lt;/p>
&lt;p>白嫖，爽！&lt;/p></description></item></channel></rss>